% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main_functions.R
\name{compute_distance_matrix}
\alias{compute_distance_matrix}
\title{Compute Distance Matrix for Sequence Data}
\usage{
compute_distance_matrix(
  data,
  method = "euclidean",
  q = 2,
  p = 0.1,
  first_order_weight = 0.3,
  second_order_weight = 0.2,
  time_weighted_weight = 0.2,
  complexity_weight = 0.15,
  persistence_weight = 0.15,
  substitution_cost = 1,
  indel_cost = 1
)
}
\arguments{
\item{data}{A data frame or matrix where rows are sequences (cases/individuals) and
columns are time points. Each cell should contain a categorical state value.
Missing values (NA) are handled appropriately by each method. Minimum 2 sequences required.}

\item{method}{Character string specifying the distance method. Options are:
\itemize{
\item \code{"euclidean"} - Fast numeric encoding (recommended for exploration)
\item \code{"hamming"} - Position-wise differences
\item \code{"lcs"} - Longest Common Subsequence similarity
\item \code{"start_position"} - First occurrence positions
\item \code{"transition"} - Advanced Markov transition analysis
\item \code{"optimal_matching"} - Optimal matching with constant substitution costs
\item \code{"osa"} - Optimal String Alignment (stringdist)
\item \code{"lv"} - Levenshtein distance (stringdist)
\item \code{"dl"} - Damerau-Levenshtein distance (stringdist)
\item \code{"qgram"} - Q-gram distance (stringdist)
\item \code{"jaro"} - Jaro distance (stringdist)
\item \code{"jw"} - Jaro-Winkler distance (stringdist)
\item \code{"cosine"} - Cosine distance on q-grams (stringdist)
\item \code{"jaccard"} - Jaccard distance on q-grams (stringdist)
\item \code{"soundex"} - Soundex phonetic distance (stringdist)
\item \code{"lcs_stringdist"} - LCS via stringdist package
}}

\item{q}{Integer. Q-gram size for qgram, cosine, and jaccard methods (default: 2)}

\item{p}{Numeric. Prefix scaling factor for Jaro-Winkler method (default: 0.1)}

\item{first_order_weight}{Numeric. Weight for basic state transitions (only for transition method, default: 0.3)}

\item{second_order_weight}{Numeric. Weight for higher-order patterns (only for transition method, default: 0.2)}

\item{time_weighted_weight}{Numeric. Weight for temporal emphasis (only for transition method, default: 0.2)}

\item{complexity_weight}{Numeric. Weight for pattern diversity (only for transition method, default: 0.15)}

\item{persistence_weight}{Numeric. Weight for state stability (only for transition method, default: 0.15)}

\item{substitution_cost}{Numeric. Cost for substituting one state for another (only for optimal_matching method, default: 1)}

\item{indel_cost}{Numeric. Cost for insertions and deletions (only for optimal_matching method, default: 1)}
}
\value{
A distance object of class 'dist' suitable for clustering functions.
}
\description{
Computes dissimilarity matrix for categorical sequence data using various methods.
Includes traditional sequence analysis methods, advanced transition analysis,
optimal matching with dynamic programming, and comprehensive stringdist algorithms.
}
\examples{
\dontrun{
# Example with categorical sequence data
data <- data.frame(
  T1 = c("A", "B", "A", "C"),
  T2 = c("B", "A", "B", "A"),
  T3 = c("C", "C", "A", "B")
)

# Compute different distance matrices
dist_euclidean <- compute_distance_matrix(data, "euclidean")
dist_levenshtein <- compute_distance_matrix(data, "lv")
dist_jaro_winkler <- compute_distance_matrix(data, "jw", p = 0.2)
dist_qgram <- compute_distance_matrix(data, "qgram", q = 3)
}

}
